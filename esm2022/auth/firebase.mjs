// DO NOT MODIFY, this file is autogenerated by tools/build.ts
export * from 'firebase/auth';
import { ɵzoneWrap } from '@angular/fire';
import { applyActionCode as _applyActionCode, beforeAuthStateChanged as _beforeAuthStateChanged, checkActionCode as _checkActionCode, confirmPasswordReset as _confirmPasswordReset, connectAuthEmulator as _connectAuthEmulator, createUserWithEmailAndPassword as _createUserWithEmailAndPassword, deleteUser as _deleteUser, fetchSignInMethodsForEmail as _fetchSignInMethodsForEmail, getAdditionalUserInfo as _getAdditionalUserInfo, getAuth as _getAuth, getIdToken as _getIdToken, getIdTokenResult as _getIdTokenResult, getMultiFactorResolver as _getMultiFactorResolver, getRedirectResult as _getRedirectResult, initializeAuth as _initializeAuth, initializeRecaptchaConfig as _initializeRecaptchaConfig, isSignInWithEmailLink as _isSignInWithEmailLink, linkWithCredential as _linkWithCredential, linkWithPhoneNumber as _linkWithPhoneNumber, linkWithPopup as _linkWithPopup, linkWithRedirect as _linkWithRedirect, onAuthStateChanged as _onAuthStateChanged, onIdTokenChanged as _onIdTokenChanged, parseActionCodeURL as _parseActionCodeURL, reauthenticateWithCredential as _reauthenticateWithCredential, reauthenticateWithPhoneNumber as _reauthenticateWithPhoneNumber, reauthenticateWithPopup as _reauthenticateWithPopup, reauthenticateWithRedirect as _reauthenticateWithRedirect, reload as _reload, revokeAccessToken as _revokeAccessToken, sendEmailVerification as _sendEmailVerification, sendPasswordResetEmail as _sendPasswordResetEmail, sendSignInLinkToEmail as _sendSignInLinkToEmail, setPersistence as _setPersistence, signInAnonymously as _signInAnonymously, signInWithCredential as _signInWithCredential, signInWithCustomToken as _signInWithCustomToken, signInWithEmailAndPassword as _signInWithEmailAndPassword, signInWithEmailLink as _signInWithEmailLink, signInWithPhoneNumber as _signInWithPhoneNumber, signInWithPopup as _signInWithPopup, signInWithRedirect as _signInWithRedirect, signOut as _signOut, unlink as _unlink, updateCurrentUser as _updateCurrentUser, updateEmail as _updateEmail, updatePassword as _updatePassword, updatePhoneNumber as _updatePhoneNumber, updateProfile as _updateProfile, useDeviceLanguage as _useDeviceLanguage, validatePassword as _validatePassword, verifyBeforeUpdateEmail as _verifyBeforeUpdateEmail, verifyPasswordResetCode as _verifyPasswordResetCode } from 'firebase/auth';
export const applyActionCode = ɵzoneWrap(_applyActionCode, true);
export const beforeAuthStateChanged = ɵzoneWrap(_beforeAuthStateChanged, true);
export const checkActionCode = ɵzoneWrap(_checkActionCode, true);
export const confirmPasswordReset = ɵzoneWrap(_confirmPasswordReset, true, 2);
export const connectAuthEmulator = ɵzoneWrap(_connectAuthEmulator, true);
export const createUserWithEmailAndPassword = ɵzoneWrap(_createUserWithEmailAndPassword, true, 2);
export const deleteUser = ɵzoneWrap(_deleteUser, true, 2);
export const fetchSignInMethodsForEmail = ɵzoneWrap(_fetchSignInMethodsForEmail, true, 2);
export const getAdditionalUserInfo = ɵzoneWrap(_getAdditionalUserInfo, true, 2);
export const getAuth = ɵzoneWrap(_getAuth, true);
export const getIdToken = ɵzoneWrap(_getIdToken, true);
export const getIdTokenResult = ɵzoneWrap(_getIdTokenResult, true);
export const getMultiFactorResolver = ɵzoneWrap(_getMultiFactorResolver, true);
export const getRedirectResult = ɵzoneWrap(_getRedirectResult, true);
export const initializeAuth = ɵzoneWrap(_initializeAuth, true);
export const initializeRecaptchaConfig = ɵzoneWrap(_initializeRecaptchaConfig, true);
export const isSignInWithEmailLink = ɵzoneWrap(_isSignInWithEmailLink, true);
export const linkWithCredential = ɵzoneWrap(_linkWithCredential, true, 2);
export const linkWithPhoneNumber = ɵzoneWrap(_linkWithPhoneNumber, true, 2);
export const linkWithPopup = ɵzoneWrap(_linkWithPopup, true, 2);
export const linkWithRedirect = ɵzoneWrap(_linkWithRedirect, true, 2);
export const onAuthStateChanged = ɵzoneWrap(_onAuthStateChanged, true);
export const onIdTokenChanged = ɵzoneWrap(_onIdTokenChanged, true);
export const parseActionCodeURL = ɵzoneWrap(_parseActionCodeURL, true);
export const reauthenticateWithCredential = ɵzoneWrap(_reauthenticateWithCredential, true, 2);
export const reauthenticateWithPhoneNumber = ɵzoneWrap(_reauthenticateWithPhoneNumber, true, 2);
export const reauthenticateWithPopup = ɵzoneWrap(_reauthenticateWithPopup, true, 2);
export const reauthenticateWithRedirect = ɵzoneWrap(_reauthenticateWithRedirect, true, 2);
export const reload = ɵzoneWrap(_reload, true, 2);
export const revokeAccessToken = ɵzoneWrap(_revokeAccessToken, true, 2);
export const sendEmailVerification = ɵzoneWrap(_sendEmailVerification, true, 2);
export const sendPasswordResetEmail = ɵzoneWrap(_sendPasswordResetEmail, true, 2);
export const sendSignInLinkToEmail = ɵzoneWrap(_sendSignInLinkToEmail, true, 2);
export const setPersistence = ɵzoneWrap(_setPersistence, true);
export const signInAnonymously = ɵzoneWrap(_signInAnonymously, true, 2);
export const signInWithCredential = ɵzoneWrap(_signInWithCredential, true, 2);
export const signInWithCustomToken = ɵzoneWrap(_signInWithCustomToken, true, 2);
export const signInWithEmailAndPassword = ɵzoneWrap(_signInWithEmailAndPassword, true, 2);
export const signInWithEmailLink = ɵzoneWrap(_signInWithEmailLink, true, 2);
export const signInWithPhoneNumber = ɵzoneWrap(_signInWithPhoneNumber, true, 2);
export const signInWithPopup = ɵzoneWrap(_signInWithPopup, true, 2);
export const signInWithRedirect = ɵzoneWrap(_signInWithRedirect, true, 2);
export const signOut = ɵzoneWrap(_signOut, true, 2);
export const unlink = ɵzoneWrap(_unlink, true, 2);
export const updateCurrentUser = ɵzoneWrap(_updateCurrentUser, true, 2);
export const updateEmail = ɵzoneWrap(_updateEmail, true, 2);
export const updatePassword = ɵzoneWrap(_updatePassword, true, 2);
export const updatePhoneNumber = ɵzoneWrap(_updatePhoneNumber, true, 2);
export const updateProfile = ɵzoneWrap(_updateProfile, true, 2);
export const useDeviceLanguage = ɵzoneWrap(_useDeviceLanguage, true, 2);
export const validatePassword = ɵzoneWrap(_validatePassword, true, 2);
export const verifyBeforeUpdateEmail = ɵzoneWrap(_verifyBeforeUpdateEmail, true, 2);
export const verifyPasswordResetCode = ɵzoneWrap(_verifyPasswordResetCode, true, 2);
//# sourceMappingURL=data:application/json;base64,