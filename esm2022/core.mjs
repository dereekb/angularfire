import { Version } from '@angular/core';
import { getApps } from 'firebase/app';
export const VERSION = new Version('ANGULARFIRE2_VERSION');
export const ɵisSupportedError = (module) => `The APP_INITIALIZER that is "making" isSupported() sync for the sake of convenient DI has not resolved in this
context. Rather than injecting ${module} in the constructor, first ensure that ${module} is supported by calling
\`await isSupported()\`, then retrieve the instance from the injector manually \`injector.get(${module})\`.`;
export function ɵgetDefaultInstanceOf(identifier, provided, defaultApp) {
    if (provided) {
        // Was provide* only called once? If so grab that
        if (provided.length === 1) {
            return provided[0];
        }
        const providedUsingDefaultApp = provided.filter((it) => it.app === defaultApp);
        // Was provide* only called once, using the default app? If so use that
        if (providedUsingDefaultApp.length === 1) {
            return providedUsingDefaultApp[0];
        }
    }
    // Grab the default instance from the defaultApp
    const defaultAppWithContainer = defaultApp;
    const provider = defaultAppWithContainer.container.getProvider(identifier);
    return provider.getImmediate({ optional: true });
}
export const ɵgetAllInstancesOf = (identifier, app) => {
    const apps = app ? [app] : getApps();
    const instances = [];
    apps.forEach((app) => {
        const provider = app.container.getProvider(identifier);
        provider.instances.forEach((instance) => {
            if (!instances.includes(instance)) {
                instances.push(instance);
            }
        });
    });
    return instances;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEMsT0FBTyxFQUFlLE9BQU8sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVwRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUUzRCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQ2xEO2lDQUMrQixNQUFNLDBDQUEwQyxNQUFNO2dHQUNTLE1BQU0sTUFBTSxDQUFDO0FBTzdHLE1BQU0sVUFBVSxxQkFBcUIsQ0FBYSxVQUFrQixFQUFFLFFBQXVCLEVBQUUsVUFBdUI7SUFDcEgsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNiLGlEQUFpRDtRQUNqRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFBQyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFDLENBQUM7UUFDbEQsTUFBTSx1QkFBdUIsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLFVBQVUsQ0FBQyxDQUFDO1FBQ3BGLHVFQUF1RTtRQUN2RSxJQUFJLHVCQUF1QixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUFDLE9BQU8sdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQyxDQUFDO0lBQ2xGLENBQUM7SUFDRCxnREFBZ0Q7SUFDaEQsTUFBTSx1QkFBdUIsR0FBNkIsVUFBaUIsQ0FBQztJQUM1RSxNQUFNLFFBQVEsR0FBRyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFVBQW1CLENBQUMsQ0FBQztJQUNwRixPQUFPLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBYSxVQUFrQixFQUFFLEdBQWlCLEVBQU8sRUFBRTtJQUMzRixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3JDLE1BQU0sU0FBUyxHQUFVLEVBQUUsQ0FBQztJQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBNkIsRUFBRSxFQUFFO1FBQzdDLE1BQU0sUUFBUSxHQUFRLEdBQUcsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFVBQW1CLENBQUMsQ0FBQztRQUNyRSxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWEsRUFBRSxFQUFFO1lBQzNDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7Z0JBQ2xDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0IsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZXJzaW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wb25lbnRDb250YWluZXIgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IEZpcmViYXNlQXBwLCBnZXRBcHBzIH0gZnJvbSAnZmlyZWJhc2UvYXBwJztcblxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSBuZXcgVmVyc2lvbignQU5HVUxBUkZJUkUyX1ZFUlNJT04nKTtcblxuZXhwb3J0IGNvbnN0IMm1aXNTdXBwb3J0ZWRFcnJvciA9IChtb2R1bGU6IHN0cmluZykgPT5cbiAgYFRoZSBBUFBfSU5JVElBTElaRVIgdGhhdCBpcyBcIm1ha2luZ1wiIGlzU3VwcG9ydGVkKCkgc3luYyBmb3IgdGhlIHNha2Ugb2YgY29udmVuaWVudCBESSBoYXMgbm90IHJlc29sdmVkIGluIHRoaXNcbmNvbnRleHQuIFJhdGhlciB0aGFuIGluamVjdGluZyAke21vZHVsZX0gaW4gdGhlIGNvbnN0cnVjdG9yLCBmaXJzdCBlbnN1cmUgdGhhdCAke21vZHVsZX0gaXMgc3VwcG9ydGVkIGJ5IGNhbGxpbmdcblxcYGF3YWl0IGlzU3VwcG9ydGVkKClcXGAsIHRoZW4gcmV0cmlldmUgdGhlIGluc3RhbmNlIGZyb20gdGhlIGluamVjdG9yIG1hbnVhbGx5IFxcYGluamVjdG9yLmdldCgke21vZHVsZX0pXFxgLmA7XG5cbi8vIFRPRE8gaXMgdGhlcmUgYSBiZXR0ZXIgd2F5IHRvIGdldCBhdCB0aGUgaW50ZXJuYWwgdHlwZXM/XG5pbnRlcmZhY2UgRmlyZWJhc2VBcHBXaXRoQ29udGFpbmVyIGV4dGVuZHMgRmlyZWJhc2VBcHAge1xuICBjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIMm1Z2V0RGVmYXVsdEluc3RhbmNlT2Y8VD0gdW5rbm93bj4oaWRlbnRpZmllcjogc3RyaW5nLCBwcm92aWRlZDogVFtdfHVuZGVmaW5lZCwgZGVmYXVsdEFwcDogRmlyZWJhc2VBcHApOiBUfHVuZGVmaW5lZCAge1xuICBpZiAocHJvdmlkZWQpIHtcbiAgICAvLyBXYXMgcHJvdmlkZSogb25seSBjYWxsZWQgb25jZT8gSWYgc28gZ3JhYiB0aGF0XG4gICAgaWYgKHByb3ZpZGVkLmxlbmd0aCA9PT0gMSkgeyByZXR1cm4gcHJvdmlkZWRbMF07IH1cbiAgICBjb25zdCBwcm92aWRlZFVzaW5nRGVmYXVsdEFwcCA9IHByb3ZpZGVkLmZpbHRlcigoaXQ6IGFueSkgPT4gaXQuYXBwID09PSBkZWZhdWx0QXBwKTtcbiAgICAvLyBXYXMgcHJvdmlkZSogb25seSBjYWxsZWQgb25jZSwgdXNpbmcgdGhlIGRlZmF1bHQgYXBwPyBJZiBzbyB1c2UgdGhhdFxuICAgIGlmIChwcm92aWRlZFVzaW5nRGVmYXVsdEFwcC5sZW5ndGggPT09IDEpIHsgcmV0dXJuIHByb3ZpZGVkVXNpbmdEZWZhdWx0QXBwWzBdOyB9XG4gIH1cbiAgLy8gR3JhYiB0aGUgZGVmYXVsdCBpbnN0YW5jZSBmcm9tIHRoZSBkZWZhdWx0QXBwXG4gIGNvbnN0IGRlZmF1bHRBcHBXaXRoQ29udGFpbmVyOiBGaXJlYmFzZUFwcFdpdGhDb250YWluZXIgPSBkZWZhdWx0QXBwIGFzIGFueTtcbiAgY29uc3QgcHJvdmlkZXIgPSBkZWZhdWx0QXBwV2l0aENvbnRhaW5lci5jb250YWluZXIuZ2V0UHJvdmlkZXIoaWRlbnRpZmllciBhcyBuZXZlcik7XG4gIHJldHVybiBwcm92aWRlci5nZXRJbW1lZGlhdGUoeyBvcHRpb25hbDogdHJ1ZSB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IMm1Z2V0QWxsSW5zdGFuY2VzT2YgPSA8VD0gdW5rbm93bj4oaWRlbnRpZmllcjogc3RyaW5nLCBhcHA/OiBGaXJlYmFzZUFwcCk6IFRbXSA9PiB7XG4gIGNvbnN0IGFwcHMgPSBhcHAgPyBbYXBwXSA6IGdldEFwcHMoKTtcbiAgY29uc3QgaW5zdGFuY2VzOiBhbnlbXSA9IFtdO1xuICBhcHBzLmZvckVhY2goKGFwcDogRmlyZWJhc2VBcHBXaXRoQ29udGFpbmVyKSA9PiB7XG4gICAgY29uc3QgcHJvdmlkZXI6IGFueSA9IGFwcC5jb250YWluZXIuZ2V0UHJvdmlkZXIoaWRlbnRpZmllciBhcyBuZXZlcik7XG4gICAgcHJvdmlkZXIuaW5zdGFuY2VzLmZvckVhY2goKGluc3RhbmNlOiBhbnkpID0+IHtcbiAgICAgIGlmICghaW5zdGFuY2VzLmluY2x1ZGVzKGluc3RhbmNlKSkge1xuICAgICAgICBpbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gaW5zdGFuY2VzO1xufTtcbiJdfQ==