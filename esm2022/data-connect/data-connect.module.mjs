import { InjectionToken, Injector, NgModule, NgZone, Optional, makeEnvironmentProviders, } from '@angular/core';
import { VERSION, ɵAngularFireSchedulers, ɵgetDefaultInstanceOf } from '@angular/fire';
import { FirebaseApp, FirebaseApps } from '@angular/fire/app';
import { registerVersion } from 'firebase/app';
import { DATA_CONNECT_PROVIDER_NAME, DataConnect, DataConnectInstances } from './data-connect';
import * as i0 from "@angular/core";
const PROVIDED_DATA_CONNECT_INSTANCES = new InjectionToken('angularfire2.data-connect-instances');
export function defaultDataConnectInstanceFactory(provided, defaultApp) {
    return ɵgetDefaultInstanceOf(DATA_CONNECT_PROVIDER_NAME, provided, defaultApp);
}
export function dataConnectInstanceFactory(fn) {
    return (zone, injector) => {
        return zone.runOutsideAngular(() => fn(injector));
    };
}
const DATA_CONNECT_INSTANCES_PROVIDER = {
    provide: DataConnectInstances,
    deps: [
        [new Optional(), PROVIDED_DATA_CONNECT_INSTANCES],
    ]
};
const DEFAULT_DATA_CONNECT_INSTANCE_PROVIDER = {
    provide: DataConnect,
    useFactory: defaultDataConnectInstanceFactory,
    deps: [
        [new Optional(), PROVIDED_DATA_CONNECT_INSTANCES],
        FirebaseApp,
    ]
};
export class DataConnectModule {
    constructor() {
        registerVersion('angularfire', VERSION.full, 'fdc');
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DataConnectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.2.13", ngImport: i0, type: DataConnectModule });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DataConnectModule, providers: [
            DEFAULT_DATA_CONNECT_INSTANCE_PROVIDER,
            DATA_CONNECT_INSTANCES_PROVIDER,
        ] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.13", ngImport: i0, type: DataConnectModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        DEFAULT_DATA_CONNECT_INSTANCE_PROVIDER,
                        DATA_CONNECT_INSTANCES_PROVIDER,
                    ]
                }]
        }], ctorParameters: () => [] });
export function provideDataConnect(fn, ...deps) {
    registerVersion('angularfire', VERSION.full, 'fdc');
    return makeEnvironmentProviders([
        DEFAULT_DATA_CONNECT_INSTANCE_PROVIDER,
        DATA_CONNECT_INSTANCES_PROVIDER,
        {
            provide: PROVIDED_DATA_CONNECT_INSTANCES,
            useFactory: dataConnectInstanceFactory(fn),
            multi: true,
            deps: [
                NgZone,
                Injector,
                ɵAngularFireSchedulers,
                FirebaseApps,
                ...deps,
            ],
        }
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1jb25uZWN0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kYXRhLWNvbm5lY3QvZGF0YS1jb25uZWN0Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsY0FBYyxFQUNkLFFBQVEsRUFDUixRQUFRLEVBQ1IsTUFBTSxFQUNOLFFBQVEsRUFDUix3QkFBd0IsR0FDekIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RixPQUFPLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDL0MsT0FBTyxFQUFFLDBCQUEwQixFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUUvRixNQUFNLCtCQUErQixHQUFHLElBQUksY0FBYyxDQUFnQixxQ0FBcUMsQ0FBQyxDQUFDO0FBRWpILE1BQU0sVUFBVSxpQ0FBaUMsQ0FBQyxRQUFpQyxFQUFFLFVBQXVCO0lBQzFHLE9BQU8scUJBQXFCLENBQWMsMEJBQTBCLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzlGLENBQUM7QUFFRCxNQUFNLFVBQVUsMEJBQTBCLENBQUMsRUFBdUM7SUFDaEYsT0FBTyxDQUFDLElBQVksRUFBRSxRQUFrQixFQUFFLEVBQUU7UUFDMUMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sK0JBQStCLEdBQUc7SUFDdEMsT0FBTyxFQUFFLG9CQUFvQjtJQUM3QixJQUFJLEVBQUU7UUFDSixDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsK0JBQStCLENBQUU7S0FDbkQ7Q0FDRixDQUFDO0FBRUYsTUFBTSxzQ0FBc0MsR0FBRztJQUM3QyxPQUFPLEVBQUUsV0FBVztJQUNwQixVQUFVLEVBQUUsaUNBQWlDO0lBQzdDLElBQUksRUFBRTtRQUNKLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSwrQkFBK0IsQ0FBRTtRQUNsRCxXQUFXO0tBQ1o7Q0FDRixDQUFDO0FBUUYsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QjtRQUNFLGVBQWUsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN0RCxDQUFDO3dHQUhVLGlCQUFpQjt5R0FBakIsaUJBQWlCO3lHQUFqQixpQkFBaUIsYUFMakI7WUFDVCxzQ0FBc0M7WUFDdEMsK0JBQStCO1NBQ2hDOzs0RkFFVSxpQkFBaUI7a0JBTjdCLFFBQVE7bUJBQUM7b0JBQ1IsU0FBUyxFQUFFO3dCQUNULHNDQUFzQzt3QkFDdEMsK0JBQStCO3FCQUNoQztpQkFDRjs7QUFPRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsRUFBdUMsRUFBRSxHQUFHLElBQVc7SUFDeEYsZUFBZSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXBELE9BQU8sd0JBQXdCLENBQUM7UUFDOUIsc0NBQXNDO1FBQ3RDLCtCQUErQjtRQUMvQjtZQUNFLE9BQU8sRUFBRSwrQkFBK0I7WUFDeEMsVUFBVSxFQUFFLDBCQUEwQixDQUFDLEVBQUUsQ0FBQztZQUMxQyxLQUFLLEVBQUUsSUFBSTtZQUNYLElBQUksRUFBRTtnQkFDSixNQUFNO2dCQUNOLFFBQVE7Z0JBQ1Isc0JBQXNCO2dCQUN0QixZQUFZO2dCQUNaLEdBQUcsSUFBSTthQUNSO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRW52aXJvbm1lbnRQcm92aWRlcnMsXG4gIEluamVjdGlvblRva2VuLFxuICBJbmplY3RvcixcbiAgTmdNb2R1bGUsXG4gIE5nWm9uZSxcbiAgT3B0aW9uYWwsXG4gIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWRVJTSU9OLCDJtUFuZ3VsYXJGaXJlU2NoZWR1bGVycywgybVnZXREZWZhdWx0SW5zdGFuY2VPZiB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUnO1xuaW1wb3J0IHsgRmlyZWJhc2VBcHAsIEZpcmViYXNlQXBwcyB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUvYXBwJztcbmltcG9ydCB7IHJlZ2lzdGVyVmVyc2lvbiB9IGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBEQVRBX0NPTk5FQ1RfUFJPVklERVJfTkFNRSwgRGF0YUNvbm5lY3QsIERhdGFDb25uZWN0SW5zdGFuY2VzIH0gZnJvbSAnLi9kYXRhLWNvbm5lY3QnO1xuXG5jb25zdCBQUk9WSURFRF9EQVRBX0NPTk5FQ1RfSU5TVEFOQ0VTID0gbmV3IEluamVjdGlvblRva2VuPERhdGFDb25uZWN0W10+KCdhbmd1bGFyZmlyZTIuZGF0YS1jb25uZWN0LWluc3RhbmNlcycpO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdERhdGFDb25uZWN0SW5zdGFuY2VGYWN0b3J5KHByb3ZpZGVkOiBEYXRhQ29ubmVjdFtdfHVuZGVmaW5lZCwgZGVmYXVsdEFwcDogRmlyZWJhc2VBcHApIHtcbiAgcmV0dXJuIMm1Z2V0RGVmYXVsdEluc3RhbmNlT2Y8RGF0YUNvbm5lY3Q+KERBVEFfQ09OTkVDVF9QUk9WSURFUl9OQU1FLCBwcm92aWRlZCwgZGVmYXVsdEFwcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhQ29ubmVjdEluc3RhbmNlRmFjdG9yeShmbjogKGluamVjdG9yOiBJbmplY3RvcikgPT4gRGF0YUNvbm5lY3QpIHtcbiAgcmV0dXJuICh6b25lOiBOZ1pvbmUsIGluamVjdG9yOiBJbmplY3RvcikgPT4ge1xuICAgIHJldHVybiB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IGZuKGluamVjdG9yKSk7XG4gIH07XG59XG5cbmNvbnN0IERBVEFfQ09OTkVDVF9JTlNUQU5DRVNfUFJPVklERVIgPSB7XG4gIHByb3ZpZGU6IERhdGFDb25uZWN0SW5zdGFuY2VzLFxuICBkZXBzOiBbXG4gICAgW25ldyBPcHRpb25hbCgpLCBQUk9WSURFRF9EQVRBX0NPTk5FQ1RfSU5TVEFOQ0VTIF0sXG4gIF1cbn07XG5cbmNvbnN0IERFRkFVTFRfREFUQV9DT05ORUNUX0lOU1RBTkNFX1BST1ZJREVSID0ge1xuICBwcm92aWRlOiBEYXRhQ29ubmVjdCxcbiAgdXNlRmFjdG9yeTogZGVmYXVsdERhdGFDb25uZWN0SW5zdGFuY2VGYWN0b3J5LFxuICBkZXBzOiBbXG4gICAgW25ldyBPcHRpb25hbCgpLCBQUk9WSURFRF9EQVRBX0NPTk5FQ1RfSU5TVEFOQ0VTIF0sXG4gICAgRmlyZWJhc2VBcHAsXG4gIF1cbn07XG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW1xuICAgIERFRkFVTFRfREFUQV9DT05ORUNUX0lOU1RBTkNFX1BST1ZJREVSLFxuICAgIERBVEFfQ09OTkVDVF9JTlNUQU5DRVNfUFJPVklERVIsXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRGF0YUNvbm5lY3RNb2R1bGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICByZWdpc3RlclZlcnNpb24oJ2FuZ3VsYXJmaXJlJywgVkVSU0lPTi5mdWxsLCAnZmRjJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVEYXRhQ29ubmVjdChmbjogKGluamVjdG9yOiBJbmplY3RvcikgPT4gRGF0YUNvbm5lY3QsIC4uLmRlcHM6IGFueVtdKTogRW52aXJvbm1lbnRQcm92aWRlcnMge1xuICByZWdpc3RlclZlcnNpb24oJ2FuZ3VsYXJmaXJlJywgVkVSU0lPTi5mdWxsLCAnZmRjJyk7XG5cbiAgcmV0dXJuIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyhbXG4gICAgREVGQVVMVF9EQVRBX0NPTk5FQ1RfSU5TVEFOQ0VfUFJPVklERVIsXG4gICAgREFUQV9DT05ORUNUX0lOU1RBTkNFU19QUk9WSURFUixcbiAgICB7XG4gICAgICBwcm92aWRlOiBQUk9WSURFRF9EQVRBX0NPTk5FQ1RfSU5TVEFOQ0VTLFxuICAgICAgdXNlRmFjdG9yeTogZGF0YUNvbm5lY3RJbnN0YW5jZUZhY3RvcnkoZm4pLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgICBkZXBzOiBbXG4gICAgICAgIE5nWm9uZSxcbiAgICAgICAgSW5qZWN0b3IsXG4gICAgICAgIMm1QW5ndWxhckZpcmVTY2hlZHVsZXJzLFxuICAgICAgICBGaXJlYmFzZUFwcHMsXG4gICAgICAgIC4uLmRlcHMsXG4gICAgICBdLFxuICAgIH1cbiAgXSk7XG59XG4iXX0=